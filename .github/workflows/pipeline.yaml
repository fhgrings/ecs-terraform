name: Lambda Deployment
on:
  push:
    branches: [ main ]
  pull_request:

env:
  terraform_version: 1.3.6
  terragrunt_version: 

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Check Terraform Version
      run: |
        terraform --version
    
    - name: Setup Terragrunt
      uses: autero1/action-terragrunt@v1.1.0
      with:
        terragrunt_version: 0.42.5
        
    - name: Interact with Terragrunt
      run: terragrunt --version  

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      continue-on-error: true
      run: | 
        stdout="$(cd terragrunt && terragrunt run-all plan -lock=false -input=false --terragrunt-non-interactive -no-color)"
        stdout="${stdout//$'\n'/'%0A'}"
        echo stdout=$stdout >> $GITHUB_OUTPUT
        # echo "stdout=$(cd terragrunt && terragrunt run-all plan -lock=false -input=false --terragrunt-non-interactive)" >> $GITHUB_OUTPUT
        # cd terragrunt && terragrunt run-all plan -lock=false -input=false --terragrunt-non-interactive -no-color
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{steps.plan.outputs.stdout}}"
        # PLAN: "terraform\n${{join(steps.plan.outputs.*, '\n')}}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      id: apply
      if: github.event_name == 'merge'
      continue-on-error: true
      run: |
        ls -al
        cd terragrunt && terragrunt run-all apply -lock=false --terragrunt-non-interactive
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
